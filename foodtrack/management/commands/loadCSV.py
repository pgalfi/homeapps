# Generated by Django 2.2.2 on 2019-06-25 19:01
import csv
import os
from abc import ABC, abstractmethod

from django.conf import settings
from django.core.management.base import BaseCommand

from foodtrack.models import Nutrient, MeasureUnit, FoodCategory, Food, FoodNutrientSource, FoodNutrientDerivation, \
    FoodNutrient, FoodPortion


class DataLoader(ABC):

    @abstractmethod
    def build(self, row):
        pass

    @abstractmethod
    def save(self, batch):
        pass

    @abstractmethod
    def execute(self):
        pass


class NutrientLoader(DataLoader):

    def build(self, row):
        id, name, unit, number, rank = row
        nutrient = Nutrient(name=name, unit=unit)
        nutrient.id = id
        return nutrient

    def save(self, batch):
        Nutrient.objects.bulk_create(batch)

    def execute(self):
        Nutrient.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\nutrient.csv"), self)


class MeasureUnitLoader(DataLoader):

    def build(self, row):
        id, name = row
        measure = MeasureUnit(name=name)
        measure.id = id
        return measure

    def save(self, batch):
        MeasureUnit.objects.bulk_create(batch)

    def execute(self):
        MeasureUnit.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\measure_unit.csv"), self)


class FoodCategoryLoader(DataLoader):

    def build(self, row):
        id, code, description = row
        foodcategory = FoodCategory(code=code, description=description)
        foodcategory.id = id
        return foodcategory

    def save(self, batch):
        FoodCategory.objects.bulk_create(batch)

    def execute(self):
        FoodCategory.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food_category.csv"), self)


class FoodLoader(DataLoader):

    def build(self, row):
        id, datatype, description, categoryid, pubdate = row
        food = Food(data_type=datatype, description=description, category_id=categoryid, pub_date=pubdate)
        food.id = id
        return food

    def save(self, batch):
        Food.objects.bulk_create(batch)

    def execute(self):
        Food.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food.csv"), self)


class FoodNutrientSourceLoader(DataLoader):

    def build(self, row):
        id, code, description = row
        nutrientsource = FoodNutrientSource(code=code, description=description)
        nutrientsource.id = id
        return nutrientsource

    def save(self, batch):
        FoodNutrientSource.objects.bulk_create(batch)

    def execute(self):
        FoodNutrientSource.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food_nutrient_source.csv"), self)


class FoodNutrientDerivationLoader(DataLoader):

    def build(self, row):
        id, code, description, source_id = row
        derivation = FoodNutrientDerivation(code=code, description=description)
        derivation.id = id
        return derivation

    def save(self, batch):
        FoodNutrientDerivation.objects.bulk_create(batch)

    def execute(self):
        FoodNutrientDerivation.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food_nutrient_derivation.csv"),
                             self)


class FoodNutrientLoader(DataLoader):

    def build(self, row):
        id, fdc_id, nutrient_id, amount, data_points, derivation_id, min, max, median, footnote, min_year_acquired = row
        foodnutrient = FoodNutrient(food_id=fdc_id, nutrient_id=nutrient_id, amount=amount, derivation_id=derivation_id)
        foodnutrient.id = id
        return foodnutrient

    def save(self, batch):
        FoodNutrient.objects.bulk_create(batch)

    def execute(self):
        FoodNutrient.objects.all().delete()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food_nutrient.csv"), self)


class FoodPortionLoader(DataLoader):

    def build(self, row):
        print(row)
        id, fdc_id, seq_num, amount, measure_unit_id, portion_description, modifier, gram_weight, data_points, footnote, min_year_acquired = row
        if len(amount)==0: amount = "0"
        portion = FoodPortion(food_id=fdc_id, amount=amount, unit_id=measure_unit_id, description=portion_description,
                              modifier=modifier, gram_weight=gram_weight)
        portion.id = id
        return portion

    def save(self, batch):
        FoodPortion.objects.bulk_create(batch)

    def execute(self):
        FoodPortion.objects.all().delete()
        # Create default 100g portion
        default_portion = FoodPortion(food_id=None, amount=1, unit_id=None, description="gramm", modifier="",
                                      gram_weight=0)
        default_portion.id = 1
        default_portion.save()
        return load_from_csv(os.path.join(settings.BASE_DIR, "foodtrack\\migrations\\food_portion.csv"), self)


def load_from_csv(csvpath, loader):
    load_batch = []
    bulk_counter = 0
    MAX_BULK_LOAD = 100
    with open(csvpath) as csvfile:
        reader = csv.reader(csvfile)
        row_count = 0
        for row in reader:
            row_count += 1
            if row_count == 1:
                continue  # skip header
            loaded_object = loader.build(row)
            load_batch.append(loaded_object)
            bulk_counter += 1
            if bulk_counter >= MAX_BULK_LOAD:
                loader.save(load_batch)
                load_batch.clear()
                bulk_counter = 0
    if bulk_counter > 0:
        loader.save(load_batch)
    return row_count


def addMetricMeasures() -> None:
    kg = MeasureUnit.objects.filter(name="kg")
    if kg.count()==0:
        kg = MeasureUnit(name="kg")
        kg.id =99999
        kg.save()



class Command(BaseCommand):

    def handle(self, *args, **options):
        # print("Loading nutrient definitions...")
        # print(str(NutrientLoader().execute()) + " rows loaded")
        # print("Loading measurement units...")
        # print(str(MeasureUnitLoader().execute()) + " rows loaded")
        # print("Loading food categories...")
        # print(str(FoodCategoryLoader().execute()) + " rows loaded")
        # print("Loading food...")
        # print(str(FoodLoader().execute()) + " rows loaded")
        # print("Loading food nutrient sources...")
        # print(str(FoodNutrientSourceLoader().execute()) + " rows loaded")
        # print("Loading food nutrient derivation...")
        # print(str(FoodNutrientDerivationLoader().execute()) + " rows loaded")
        # print("Loading food nutrients...")
        # print(str(FoodNutrientLoader().execute()) + " rows loaded")
        # print("Loading food portions...")
        # print(str(FoodPortionLoader().execute()) + " rows loaded")
        addMetricMeasures()